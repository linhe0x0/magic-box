upstream APPNAME_upstream {
  server 127.0.0.1:3000;
}

# Connection header for WebSocket reverse proxy.
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server.
map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

map $remote_addr $proxy_forwarded_elem {
  # IPv4 addresses can be sent as-is
  ~^[0-9.]+$        "for=$remote_addr";

  # IPv6 addresses need to be bracketed and quoted
  ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";

  # Unix domain socket names cannot be represented in RFC 7239 syntax
  default           "for=unknown";
}

map $http_forwarded $proxy_add_forwarded {
  # If the incoming Forwarded header is syntactically valid, append to it
  "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";

  # Otherwise, replace it
  default "$proxy_forwarded_elem";
}

# Force redirect http to https.
server {
  listen       80;
  listen       [::]:80;
  server_name  APP_DOMAIN;
  return       301 https://$host$request_uri;
}

# Redirect www subdomain.
server {
  listen       80;
  listen       [::]:80;
  server_name  www.APP_DOMAIN;
  return       301 https://APP_DOMAIN$request_uri;
}

server {
  listen                  443 ssl;
  listen                  [::]:443 ssl;
  http2                   on;
  server_name             www.APP_DOMAIN;

  ssl_certificate         /etc/nginx/ssl/APP_DOMAIN.pem;
  ssl_certificate_key     /etc/nginx/ssl/APP_DOMAIN.key;

  return                  301 https://APP_DOMAIN$request_uri;
}

# Main
server {
  listen      443 ssl;
  listen      [::]:443 ssl;
  http2       on;
  server_name APP_DOMAIN;
  root        /var/www/APPNAME/public;

  # SSL
  # The specific details depend on your certificate.
  ssl_certificate               /etc/nginx/ssl/APP_DOMAIN.pem;
  ssl_certificate_key           /etc/nginx/ssl/APP_DOMAIN.key;
  ssl_session_timeout           5m;
  ssl_ciphers                   ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
  ssl_protocols                 TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers     on;

  # Logging
  access_log    /var/log/nginx/APP_DOMAIN/.access.log;
  error_log     /var/log/nginx/APP_DOMAIN/.error.log warn;

  # gzip
  gzip            on;
  gzip_vary       on;
  gzip_proxied    any;
  gzip_comp_level 6;
  gzip_types      text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;

  # Security headers
  add_header X-XSS-Protection          "1; mode=block" always;
  add_header X-Content-Type-Options    "nosniff" always;
  add_header Referrer-Policy           "no-referrer-when-downgrade" always;
  add_header Content-Security-Policy   "default-src 'self' http: https: ws: wss: data: blob: 'unsafe-inline'; frame-ancestors 'self';" always;
  add_header Permissions-Policy        "interest-cohort=()" always;
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

  # . files
  location ~ /\.(?!well-known) {
    deny all;
  }

  # Assets
  location ~* \.(?:css(\.map)?|js(\.map)?|ttf|ttc|otf|eot|woff2?|svgz?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv|pdf|docx?|dotx?|docm|dotm|xlsx?|xltx?|xlsm|xltm|pptx?|potx?|pptm|potm|ppsx|zip|tgz|gz|rar|tar?)$ {
    access_log off;

    # Control "Expires" and "Cache-Control" header fields to implement browser caching.
    # You also can set to 24h, 30d, modified +24h, max, off.
    # If your assets is named with unique hash or something, maybe set to max is a good choice.
    # See more http://nginx.org/en/docs/http/ngx_http_headers_module.html.
    expires max;

    try_files $uri =404;
  }

  # favicon.ico
  location = /favicon.ico {
    log_not_found off;
    access_log    off;
  }

  # robots.txt
  location = /robots.txt {
    log_not_found off;
    access_log    off;
  }

  # Rewrite all not-found requests to index.html.
  # Useful for single page web application.
  location / {
    try_files $uri $uri/index.html /index.html =404;
  }

  # Rewrite all api requests to app upstream.
  location ^~ /api {
    try_files $uri @app;
  }

  # Reverse proxy
  location @app {
    proxy_http_version                 1.1;
    proxy_cache_bypass                 $http_upgrade;

    # Proxy headers
    proxy_set_header Upgrade           $http_upgrade;
    proxy_set_header Connection        $connection_upgrade;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Nginx-Proxy     true;
    proxy_set_header Forwarded         $proxy_add_forwarded;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host  $host;
    proxy_set_header X-Forwarded-Port  $server_port;

    # Proxy timeouts
    proxy_connect_timeout              60s;
    proxy_send_timeout                 60s;
    proxy_read_timeout                 60s;

    proxy_pass  http://APPNAME_upstream;
  }

  # Setup 50x error page,
  # and rewrite 50x to default error page.
  error_page 502 504 /50x.html;
  location = /50x.html {
    root   /usr/share/nginx/html;
  }
}
